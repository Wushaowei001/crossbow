(* Copyright (c) 2013 Radek Micek *)

(** Least number heuristic. *)

(** These constraints are generated by the least number heuristic.

   Meaning of the constraint [{assig = (c, v); required = (cs, v')}]:
   value [v] can be assigned to the cell [c] only if
   one of the cells [cs] is assigned value [v'].
*)
type 's t = {
  assig : 's Symred.cell * int;
  required : 's Symred.cell array * int;
}

(** [lnh symbols sorts proc_cells cell] returns constraints for the cell
   [cell]. Cells are given together with their range. [proc_cells] are cells
   already processed by LNH.

   We say that a value is {b used} if it is used as an argument
   in [proc_cells] or [cell] or if it is assigned to some cell
   in [proc_cells]. We say that a value is {b new} if it is not used.

   If the cell [cell] is assigned a new value then
   the constraints guarantee that it is the least new value in its range.
*)
val lnh :
  's Symb.db -> 's Sorts.t ->
  ('s Symred.cell * (int * int)) list ->
  's Symred.cell * (int * int) ->
  's t array
